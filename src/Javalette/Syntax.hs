{- | Re-export of bnfc-autogenerated module -}
module Javalette.Syntax
  ( module Javalette.Syntax.AbsJavalette
  , sampleProg
  , smallProg
  ) where

import Javalette.Syntax.AbsJavalette
import Javalette.Syntax.PrintJavalette hiding (Doc)

import Javalette.PrettyPrint

instance Pretty Prog where
  pPrint = pPrintConv

-- | Any type that implements `Print` can implement `pPrint` with this.
pPrintConv :: Print a => a -> Doc
pPrintConv = text . printTree

sampleProg :: Prog
sampleProg = Program [FnDef Int (Ident "main") [] (Block [SExp (EApp (Ident "printInt") [EApp (Ident "fac") [ELitInt 10]]),SExp (EApp (Ident "printInt") [EApp (Ident "rfac") [ELitInt 10]]),SExp (EApp (Ident "printInt") [EApp (Ident "mfac") [ELitInt 10]]),SExp (EApp (Ident "printInt") [EApp (Ident "ifac") [ELitInt 10]]),Decl Doub [NoInit (Ident "r")],BStmt (Block [Decl Int [Init (Ident "n") (ELitInt 10)],Decl Int [Init (Ident "r") (ELitInt 1)],While (ERel (EVar (Ident "n")) GTH (ELitInt 0)) (BStmt (Block [Ass (Ident "r") (EMul (EVar (Ident "r")) Times (EVar (Ident "n"))),Decr (Ident "n")])),SExp (EApp (Ident "printInt") [EVar (Ident "r")])]),SExp (EApp (Ident "printDouble") [EApp (Ident "dfac") [ELitDoub 10.0]]),SExp (EApp (Ident "printString") [EString "hello */"]),SExp (EApp (Ident "printString") [EString "/* world"]),Ret (ELitInt 0)]),FnDef Int (Ident "fac") [Argument Int (Ident "a")] (Block [Decl Int [NoInit (Ident "r")],Decl Int [NoInit (Ident "n")],Ass (Ident "r") (ELitInt 1),Ass (Ident "n") (EVar (Ident "a")),While (ERel (EVar (Ident "n")) GTH (ELitInt 0)) (BStmt (Block [Ass (Ident "r") (EMul (EVar (Ident "r")) Times (EVar (Ident "n"))),Ass (Ident "n") (EAdd (EVar (Ident "n")) Minus (ELitInt 1))])),Ret (EVar (Ident "r"))]),FnDef Int (Ident "rfac") [Argument Int (Ident "n")] (Block [CondElse (ERel (EVar (Ident "n")) EQU (ELitInt 0)) (Ret (ELitInt 1)) (Ret (EMul (EVar (Ident "n")) Times (EApp (Ident "rfac") [EAdd (EVar (Ident "n")) Minus (ELitInt 1)])))]),FnDef Int (Ident "mfac") [Argument Int (Ident "n")] (Block [CondElse (ERel (EVar (Ident "n")) EQU (ELitInt 0)) (Ret (ELitInt 1)) (Ret (EMul (EVar (Ident "n")) Times (EApp (Ident "nfac") [EAdd (EVar (Ident "n")) Minus (ELitInt 1)])))]),FnDef Int (Ident "nfac") [Argument Int (Ident "n")] (Block [CondElse (ERel (EVar (Ident "n")) NE (ELitInt 0)) (Ret (EMul (EApp (Ident "mfac") [EAdd (EVar (Ident "n")) Minus (ELitInt 1)]) Times (EVar (Ident "n")))) (Ret (ELitInt 1))]),FnDef Doub (Ident "dfac") [Argument Doub (Ident "n")] (Block [CondElse (ERel (EVar (Ident "n")) EQU (ELitDoub 0.0)) (Ret (ELitDoub 1.0)) (Ret (EMul (EVar (Ident "n")) Times (EApp (Ident "dfac") [EAdd (EVar (Ident "n")) Minus (ELitDoub 1.0)])))]),FnDef Int (Ident "ifac") [Argument Int (Ident "n")] (Block [Ret (EApp (Ident "ifac2f") [ELitInt 1,EVar (Ident "n")])]),FnDef Int (Ident "ifac2f") [Argument Int (Ident "l"),Argument Int (Ident "h")] (Block [Cond (ERel (EVar (Ident "l")) EQU (EVar (Ident "h"))) (Ret (EVar (Ident "l"))),Cond (ERel (EVar (Ident "l")) GTH (EVar (Ident "h"))) (Ret (ELitInt 1)),Decl Int [NoInit (Ident "m")],Ass (Ident "m") (EMul (EAdd (EVar (Ident "l")) Plus (EVar (Ident "h"))) Div (ELitInt 2)),Ret (EMul (EApp (Ident "ifac2f") [EVar (Ident "l"),EVar (Ident "m")]) Times (EApp (Ident "ifac2f") [EAdd (EVar (Ident "m")) Plus (ELitInt 1),EVar (Ident "h")]))])]

smallProg = Program [FnDef Int (Ident "main") [] (Block [SExp (EApp (Ident "printInt") [EApp (Ident "fac") [ELitInt 10]]),SExp (EApp (Ident "printInt") [EApp (Ident "rfac") [ELitInt 10]]),SExp (EApp (Ident "printInt") [EApp (Ident "mfac") [ELitInt 10]]),SExp (EApp (Ident "printInt") [EApp (Ident "ifac") [ELitInt 10]])])]
